Благодарим Вас за интерес, проявленный к вакансии "Программист MS SQL/ С#"..
 
Мы внимательно ознакомились с Вашим резюме, и рассматриваем Вашу кандидатуру на эту позицию.
Для нас очень важно проверить Ваши навыки программирования, поэтому предлагаем Вам выполнить тестовое задание - см.ниже.
Результаты просьба присылать в ответ с копией на <igor@crm-soft.ru>.
 
Просьба также указать, сколько времени у Вас заняло выполнение данного задания.
 
Если Вы не захотите или не сможете справиться с данным заданием, просьба сообщить нам об этом.
 
Вакансия полностью соответствует написанному в ней (с акцентом на MS SQL). Если у Вас возникнут уточняющие вопросы, я с радостью Вам отвечу.
На этой позиции есть хорошие перспективы роста, поэтому мы очень тщательно подходим к выбору кандидатов.
 
 
С уважением,
Сердюкова Светлана
директор по развитию
CRM-Soft
+7 921 9844654
skype: lanaspb7
 
-------- Пересылаемое сообщение--------
23.10.2014, 11:06, "igor@crm-soft.ru" <igor@crm-soft.ru>:
 
Высылаю тестовое задание
 
Общее описание:

При визите пациента ко врачу, надо начислять премиальное вознаграждение в размере 5% от стоимости визита тому врачу, который рекомендовал пациенту пройти процедуры.
Тестовое задание - сделать хранимку, которая будет возвращать табличку с данными для отчета. Формирование итоговых сумм производится средствами sql.
 
Пояснения:
 
1. Визиты хранятся в dbo.visits.
2. Услуги визита хранятся в dbo.visits_services (join dbo.visits on visit_id)
3. Услуга считается оказанной, если dbo.status.service_done=1 (join dbo.visits on status_id). При выборе визитов, и при поиске предыдущего посещения, нас интересуют только оказанные услуги.
4. Информация о враче-рекомендателе хранится в dbo.visits.doctor_id2. То есть если в визите заполнены поля doctor_id и doctor_id2, это значит что пациента принимает врач doctor_id по рекомендации врача doctor_id2. Поле doctor_id заполнено всегда, doctor_id2 - может быть Null. Нас интересуют только записи с doctor_id2 Not Null
5. Специальность врача хранится в таблице doctors_professions:
  visits inner join doctors on doctor_id inner join doctors_professions
  Мастерами маникюра-педикюра считаем врачей, у которых в названии профессии есть слово "маникюр".
6. Если услуги оказывал специалист по маникюру-педикюру, то из визита берем только самую дорогую услугу, остальные услуги не учитываем.
7. Для всех остальных (не мастеров маникюра) берем полную стоимость оказанных по визиту услуг.
8. Финальная стомость услуг, с учетом округлений и скидок, хранится в visits.cost_with_discount и в visits_services.cost_with_discount. Сумма visits_services.cost_with_discount по услугам визита совпадает с visits.cost_with_discount визита. Заполнение полей cost_with_discount производится триггерами, в тестовой базе триггера удалены.
9. Дата визита хранится в поле dbo.visits.dd. Время визита хранится отдельно от даты, в полях h, mins, h_mins.
10. По тестовому заданию нужен только SQL, в виде хранимки или в виде скрипта.
11.1. Для всех визитов, попавших в отчет, проверяем наличие предшествующих визитов этого пациента к тому же лечащему врачу. Если пациент уже приходил к этому врачу, то визит отображается в отчете, но премиальные по нему не начисляются, и ставится отметка что визит повторный.
11.2. Например, если пациента Иванова к врачу Маникюрову направили врач Хирургов в апреле и врач Терапевтов в мае, учитываем только направление Хирургова. Направление Терапевтова - повторное/ошибочное, желательно чтобы оно попадало в итоговый отчет, но с припиской "Ошибка/повторно" и с нулевой суммой премиальных %.
11.3. Если пациент впервые посетил врача Маникюрова 14 апреля (doctor_id=ссылка на Маникюрова, doctor_id2=Null), а посещение по рекомендации (doctor_id=ссылка на Маникюрова, doctor_id2=ссылка на Пилюлькина) произошло 16 мая, рекомендацию Пилюлькина считаем ошибочной. На премирование влияют только случаи, когда рекомендация привела к первичному посещению пациентом другого врача.
 
Тестовая задача - написать sql для получения описанного отчета.
Входные параметры: @d1 not null (обязательная дата начала отчетного периода), @d2 not null (обязательная дата окончания отчетного периода), @doctor_id (исполнитель - фильтрация возможна, но не обязательна), @doctor_id2 (рекомендатель - фильтрация возможна, но не обязательна), @group_by (выбор варианта группировки).
Варианты группировки результата: по пациенту, по исполнителю, по рекомендателю, по дате (в виде yyyy-mm-dd), по месяцу (в виде yyyy-mm), по специальности врача.
В секции детализации одна строка = один визит
Группровка и вывод итоговых сумм обеспечивается средствами sql. Результат должен быть представлен в виде одной таблички.
 
db_for_test_task.rar = бак MS SQL 2005 express edition
 
Референсное решение (57 строк кода без учета комментариев) предоставляется после выполнения тестового задания. Моя оценка требуемого на задачу времени - около 4 часов.

Образец результата: Группировка Рекомендовавший врач. 